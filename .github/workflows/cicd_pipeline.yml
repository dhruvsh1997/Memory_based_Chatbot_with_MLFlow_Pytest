name: CI/CD Pipeline

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master" ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.8, 3.9]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov flake8 mlflow

    - name: Create .env file for Groq API key
      run: |
        echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" > .env
      env:
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings for other checks
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests with pytest
      run: |
        pytest --maxfail=3 --disable-warnings -q --cov=. --cov-report=xml

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: coverage.xml
        if-no-files-found: error

    - name: Test Flask app import
      run: |
        python -c "import app; print('Flask app imports successfully')"

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t crypto-fluctuation-app .

    - name: Test Docker image
      run: |
        docker run -d -p 5000:5000 --name test-container crypto-fluctuation-app
        sleep 10
        curl -f http://localhost:5000/ || exit 1
        docker stop test-container
        docker rm test-container

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy notification
      run: |
        echo "Deployment step - Configure your deployment strategy here"